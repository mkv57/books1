// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/api/proto/v1/service.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationRequestMultiError, or nil if none found.
func (m *RegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return RegistrationRequestMultiError(errors)
	}

	return nil
}

// RegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by RegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationRequestMultiError) AllErrors() []error { return m }

// RegistrationRequestValidationError is the validation error returned by
// RegistrationRequest.Validate if the designated constraints aren't met.
type RegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationRequestValidationError) ErrorName() string {
	return "RegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationRequestValidationError{}

// Validate checks the field values on RegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationResponseMultiError, or nil if none found.
func (m *RegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RegistrationResponseMultiError(errors)
	}

	return nil
}

// RegistrationResponseMultiError is an error wrapping multiple validation
// errors returned by RegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type RegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationResponseMultiError) AllErrors() []error { return m }

// RegistrationResponseValidationError is the validation error returned by
// RegistrationResponse.Validate if the designated constraints aren't met.
type RegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationResponseValidationError) ErrorName() string {
	return "RegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on AllBooksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllBooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBooksRequestMultiError, or nil if none found.
func (m *AllBooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	if len(errors) > 0 {
		return AllBooksRequestMultiError(errors)
	}

	return nil
}

// AllBooksRequestMultiError is an error wrapping multiple validation errors
// returned by AllBooksRequest.ValidateAll() if the designated constraints
// aren't met.
type AllBooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBooksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBooksRequestMultiError) AllErrors() []error { return m }

// AllBooksRequestValidationError is the validation error returned by
// AllBooksRequest.Validate if the designated constraints aren't met.
type AllBooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBooksRequestValidationError) ErrorName() string { return "AllBooksRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllBooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBooksRequestValidationError{}

// Validate checks the field values on AllBooksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllBooksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBooksResponseMultiError, or nil if none found.
func (m *AllBooksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBooksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBook1() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllBooksResponseValidationError{
						field:  fmt.Sprintf("Book1[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllBooksResponseValidationError{
						field:  fmt.Sprintf("Book1[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllBooksResponseValidationError{
					field:  fmt.Sprintf("Book1[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllBooksResponseMultiError(errors)
	}

	return nil
}

// AllBooksResponseMultiError is an error wrapping multiple validation errors
// returned by AllBooksResponse.ValidateAll() if the designated constraints
// aren't met.
type AllBooksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBooksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBooksResponseMultiError) AllErrors() []error { return m }

// AllBooksResponseValidationError is the validation error returned by
// AllBooksResponse.Validate if the designated constraints aren't met.
type AllBooksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBooksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBooksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBooksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBooksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBooksResponseValidationError) ErrorName() string { return "AllBooksResponseValidationError" }

// Error satisfies the builtin error interface
func (e AllBooksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBooksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBooksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBooksResponseValidationError{}

// Validate checks the field values on Book1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Book1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Book1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Book1MultiError, or nil if none found.
func (m *Book1) ValidateAll() error {
	return m.validate(true)
}

func (m *Book1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Year

	if all {
		switch v := interface{}(m.GetCteatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Book1ValidationError{
					field:  "CteatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Book1ValidationError{
					field:  "CteatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCteatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Book1ValidationError{
				field:  "CteatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Book1ValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Book1ValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Book1ValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Book1MultiError(errors)
	}

	return nil
}

// Book1MultiError is an error wrapping multiple validation errors returned by
// Book1.ValidateAll() if the designated constraints aren't met.
type Book1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Book1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Book1MultiError) AllErrors() []error { return m }

// Book1ValidationError is the validation error returned by Book1.Validate if
// the designated constraints aren't met.
type Book1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Book1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Book1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Book1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Book1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Book1ValidationError) ErrorName() string { return "Book1ValidationError" }

// Error satisfies the builtin error interface
func (e Book1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBook1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Book1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Book1ValidationError{}

// Validate checks the field values on DeleteBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookRequestMultiError, or nil if none found.
func (m *DeleteBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBookRequestMultiError(errors)
	}

	return nil
}

// DeleteBookRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBookRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookRequestMultiError) AllErrors() []error { return m }

// DeleteBookRequestValidationError is the validation error returned by
// DeleteBookRequest.Validate if the designated constraints aren't met.
type DeleteBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookRequestValidationError) ErrorName() string {
	return "DeleteBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookRequestValidationError{}

// Validate checks the field values on DeleteBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBookResponseMultiError, or nil if none found.
func (m *DeleteBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBookResponseMultiError(errors)
	}

	return nil
}

// DeleteBookResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteBookResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBookResponseMultiError) AllErrors() []error { return m }

// DeleteBookResponseValidationError is the validation error returned by
// DeleteBookResponse.Validate if the designated constraints aren't met.
type DeleteBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBookResponseValidationError) ErrorName() string {
	return "DeleteBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBookResponseValidationError{}

// Validate checks the field values on UpdateBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookRequestMultiError, or nil if none found.
func (m *UpdateBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Year

	if len(errors) > 0 {
		return UpdateBookRequestMultiError(errors)
	}

	return nil
}

// UpdateBookRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBookRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookRequestMultiError) AllErrors() []error { return m }

// UpdateBookRequestValidationError is the validation error returned by
// UpdateBookRequest.Validate if the designated constraints aren't met.
type UpdateBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookRequestValidationError) ErrorName() string {
	return "UpdateBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookRequestValidationError{}

// Validate checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBookResponseMultiError, or nil if none found.
func (m *UpdateBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBookResponseMultiError(errors)
	}

	return nil
}

// UpdateBookResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateBookResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookResponseMultiError) AllErrors() []error { return m }

// UpdateBookResponseValidationError is the validation error returned by
// UpdateBookResponse.Validate if the designated constraints aren't met.
type UpdateBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookResponseValidationError) ErrorName() string {
	return "UpdateBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookResponseValidationError{}

// Validate checks the field values on GetBookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBookRequestMultiError,
// or nil if none found.
func (m *GetBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBookRequestMultiError(errors)
	}

	return nil
}

// GetBookRequestMultiError is an error wrapping multiple validation errors
// returned by GetBookRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookRequestMultiError) AllErrors() []error { return m }

// GetBookRequestValidationError is the validation error returned by
// GetBookRequest.Validate if the designated constraints aren't met.
type GetBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookRequestValidationError) ErrorName() string { return "GetBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookRequestValidationError{}

// Validate checks the field values on GetBookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookResponseMultiError, or nil if none found.
func (m *GetBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookResponseMultiError(errors)
	}

	return nil
}

// GetBookResponseMultiError is an error wrapping multiple validation errors
// returned by GetBookResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookResponseMultiError) AllErrors() []error { return m }

// GetBookResponseValidationError is the validation error returned by
// GetBookResponse.Validate if the designated constraints aren't met.
type GetBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookResponseValidationError) ErrorName() string { return "GetBookResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookResponseValidationError{}

// Validate checks the field values on AddBookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBookRequestMultiError,
// or nil if none found.
func (m *AddBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := AddBookRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetYear() < 1 {
		err := AddBookRequestValidationError{
			field:  "Year",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBookRequestMultiError(errors)
	}

	return nil
}

// AddBookRequestMultiError is an error wrapping multiple validation errors
// returned by AddBookRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookRequestMultiError) AllErrors() []error { return m }

// AddBookRequestValidationError is the validation error returned by
// AddBookRequest.Validate if the designated constraints aren't met.
type AddBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookRequestValidationError) ErrorName() string { return "AddBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookRequestValidationError{}

// Validate checks the field values on AddBookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBookResponseMultiError, or nil if none found.
func (m *AddBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBook()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBookResponseValidationError{
					field:  "Book",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBook()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBookResponseValidationError{
				field:  "Book",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBookResponseMultiError(errors)
	}

	return nil
}

// AddBookResponseMultiError is an error wrapping multiple validation errors
// returned by AddBookResponse.ValidateAll() if the designated constraints
// aren't met.
type AddBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookResponseMultiError) AllErrors() []error { return m }

// AddBookResponseValidationError is the validation error returned by
// AddBookResponse.Validate if the designated constraints aren't met.
type AddBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookResponseValidationError) ErrorName() string { return "AddBookResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Book with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Book) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Book with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookMultiError, or nil if none found.
func (m *Book) ValidateAll() error {
	return m.validate(true)
}

func (m *Book) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Year

	if all {
		switch v := interface{}(m.GetCteatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "CteatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "CteatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCteatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookValidationError{
				field:  "CteatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookMultiError(errors)
	}

	return nil
}

// BookMultiError is an error wrapping multiple validation errors returned by
// Book.ValidateAll() if the designated constraints aren't met.
type BookMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookMultiError) AllErrors() []error { return m }

// BookValidationError is the validation error returned by Book.Validate if the
// designated constraints aren't met.
type BookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookValidationError) ErrorName() string { return "BookValidationError" }

// Error satisfies the builtin error interface
func (e BookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookValidationError{}
