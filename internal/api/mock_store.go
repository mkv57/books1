// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination mock_store.go -package api
//

// Package api is a generated GoMock package.
package api

import (
	domain "books1/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteBookFromDatabaseByRAWSql mocks base method.
func (m *MockStore) DeleteBookFromDatabaseByRAWSql(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookFromDatabaseByRAWSql", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookFromDatabaseByRAWSql indicates an expected call of DeleteBookFromDatabaseByRAWSql.
func (mr *MockStoreMockRecorder) DeleteBookFromDatabaseByRAWSql(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookFromDatabaseByRAWSql", reflect.TypeOf((*MockStore)(nil).DeleteBookFromDatabaseByRAWSql), ctx, id)
}

// GetAllBookFromDatabaseByRAWSql mocks base method.
func (m *MockStore) GetAllBookFromDatabaseByRAWSql(ctx context.Context) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBookFromDatabaseByRAWSql", ctx)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBookFromDatabaseByRAWSql indicates an expected call of GetAllBookFromDatabaseByRAWSql.
func (mr *MockStoreMockRecorder) GetAllBookFromDatabaseByRAWSql(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBookFromDatabaseByRAWSql", reflect.TypeOf((*MockStore)(nil).GetAllBookFromDatabaseByRAWSql), ctx)
}

// GetBookFromDatabaseByRAWSql mocks base method.
func (m *MockStore) GetBookFromDatabaseByRAWSql(ctx context.Context, id uint) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookFromDatabaseByRAWSql", ctx, id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookFromDatabaseByRAWSql indicates an expected call of GetBookFromDatabaseByRAWSql.
func (mr *MockStoreMockRecorder) GetBookFromDatabaseByRAWSql(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookFromDatabaseByRAWSql", reflect.TypeOf((*MockStore)(nil).GetBookFromDatabaseByRAWSql), ctx, id)
}

// SaveBookToDataBaseByRAWSql mocks base method.
func (m *MockStore) SaveBookToDataBaseByRAWSql(ctx context.Context, book domain.Book) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBookToDataBaseByRAWSql", ctx, book)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBookToDataBaseByRAWSql indicates an expected call of SaveBookToDataBaseByRAWSql.
func (mr *MockStoreMockRecorder) SaveBookToDataBaseByRAWSql(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookToDataBaseByRAWSql", reflect.TypeOf((*MockStore)(nil).SaveBookToDataBaseByRAWSql), ctx, book)
}

// UpDateBookToDataBaseByRAWSql mocks base method.
func (m *MockStore) UpDateBookToDataBaseByRAWSql(ctx context.Context, book domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpDateBookToDataBaseByRAWSql", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpDateBookToDataBaseByRAWSql indicates an expected call of UpDateBookToDataBaseByRAWSql.
func (mr *MockStoreMockRecorder) UpDateBookToDataBaseByRAWSql(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpDateBookToDataBaseByRAWSql", reflect.TypeOf((*MockStore)(nil).UpDateBookToDataBaseByRAWSql), ctx, book)
}
